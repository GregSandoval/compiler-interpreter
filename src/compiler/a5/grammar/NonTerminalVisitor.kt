package compiler.a5.grammar

import compiler.parser.Symbol.NonTerminal
import compiler.parser.Symbol.NonTerminal.*


interface NonTerminalVisitor {
    fun accept(node: NonTerminal) = when (node) {
        is Pgm -> visit(node)
        is Main -> visit(node)
        is BBlock -> visit(node)
        is Vargroup -> visit(node)
        is PPvarlist -> visit(node)
        is Varlist -> visit(node)
        is Varitem -> visit(node)
        is Varitem_Suffix -> visit(node)
        is Vardecl -> visit(node)
        is Simplekind -> visit(node)
        is BaseKind -> visit(node)
        is Classid -> visit(node)
        is Varspec -> visit(node)
        is Varid -> visit(node)
        is Arrspec -> visit(node)
        is KKint -> visit(node)
        is Deref_id -> visit(node)
        is Deref -> visit(node)
        is Varinit -> visit(node)
        is BBexprs -> visit(node)
        is Exprlist -> visit(node)
        is Moreexprs -> visit(node)
        is Classdecl -> visit(node)
        is Classdef -> visit(node)
        is Classdef_Suffix -> visit(node)
        is BBClassitems -> visit(node)
        is Classheader -> visit(node)
        is Classmom -> visit(node)
        is Classitems -> visit(node)
        is Classgroup -> visit(node)
        is Class_ctrl -> visit(node)
        is Interfaces -> visit(node)
        is Mddecls -> visit(node)
        is Mdheader -> visit(node)
        is Md_id -> visit(node)
        is Fcndefs -> visit(node)
        is Fcndef -> visit(node)
        is Fcnheader -> visit(node)
        is Fcnid -> visit(node)
        is Retkind -> visit(node)
        is PParmlist -> visit(node)
        is Varspecs -> visit(node)
        is More_varspecs -> visit(node)
        is PPonly -> visit(node)
        is Stmts -> visit(node)
        is Stmt -> visit(node)
        is StasgnOrFcall -> visit(node)
        is StasgnOrFcall_Suffix -> visit(node)
        is Stasgn_Suffix -> visit(node)
        is Lval_Suffix -> visit(node)
        is Lval -> visit(node)
        is LvalOrFcall -> visit(node)
        is LvalOrFcall_Suffix -> visit(node)
        is Lval_Tail -> visit(node)
        is KKexpr -> visit(node)
        is Fcall -> visit(node)
        is PPexprs -> visit(node)
        is Stif -> visit(node)
        is Elsepart -> visit(node)
        is Stwhile -> visit(node)
        is Stprint -> visit(node)
        is Stinput -> visit(node)
        is Strtn -> visit(node)
        is Strtn_Suffix -> visit(node)
        is PPexpr -> visit(node)
        is Expr -> visit(node)
        is Expr_Tail -> visit(node)
        is Rterm -> visit(node)
        is Rterm_Tail -> visit(node)
        is Term -> visit(node)
        is Term_Tail -> visit(node)
        is Fact -> visit(node)
        is BaseLiteral -> visit(node)
        is Addrof_id -> visit(node)
        is Oprel -> visit(node)
        is Lthan -> visit(node)
        is Gthan -> visit(node)
        is Opadd -> visit(node)
        is Opmul -> visit(node)
        is Epsilon -> visit(node)
        is NULL_NODE -> visit(node)
        is ParseTreeSentinel -> visit(node)
    }

    fun visit(parseTreeSentinel: ParseTreeSentinel)
    fun visit(nullNode: NULL_NODE)
    fun visit(pgm: Pgm)
    fun visit(main: Main)
    fun visit(bBlock: BBlock)
    fun visit(vargroup: Vargroup)
    fun visit(pPvarlist: PPvarlist)
    fun visit(varlist: Varlist)
    fun visit(varitem: Varitem)
    fun visit(varitem_Suffix: Varitem_Suffix)
    fun visit(vardecl: Vardecl)
    fun visit(simplekind: Simplekind)
    fun visit(baseKind: BaseKind)
    fun visit(classid: Classid)
    fun visit(varspec: Varspec)
    fun visit(varid: Varid)
    fun visit(arrspec: Arrspec)
    fun visit(kKint: KKint)
    fun visit(derefID: Deref_id)
    fun visit(deref: Deref)
    fun visit(varinit: Varinit)
    fun visit(bBexprs: BBexprs)
    fun visit(exprlist: Exprlist)
    fun visit(moreexprs: Moreexprs)
    fun visit(classdecl: Classdecl)
    fun visit(classdef: Classdef)
    fun visit(classDefSuffix: Classdef_Suffix)
    fun visit(bBClassitems: BBClassitems)
    fun visit(classheader: Classheader)
    fun visit(classmom: Classmom)
    fun visit(classitems: Classitems)
    fun visit(classgroup: Classgroup)
    fun visit(classCtrl: Class_ctrl)
    fun visit(interfaces: Interfaces)
    fun visit(mddecls: Mddecls)
    fun visit(mdheader: Mdheader)
    fun visit(mdId: Md_id)
    fun visit(fcndefs: Fcndefs)
    fun visit(fcndef: Fcndef)
    fun visit(fcnheader: Fcnheader)
    fun visit(fcnid: Fcnid)
    fun visit(retkind: Retkind)
    fun visit(pParmlist: PParmlist)
    fun visit(varspecs: Varspecs)
    fun visit(moreVarspecs: More_varspecs)
    fun visit(pPonly: PPonly)
    fun visit(stmts: Stmts)
    fun visit(stmt: Stmt)
    fun visit(stasgnOrFcall: StasgnOrFcall)
    fun visit(stasgnOrFcallSuffix: StasgnOrFcall_Suffix)
    fun visit(stasgnSuffix: Stasgn_Suffix)
    fun visit(lvalSuffix: Lval_Suffix)
    fun visit(lval: Lval)
    fun visit(lvalOrFcall: LvalOrFcall)
    fun visit(lvalOrFcallSuffix: LvalOrFcall_Suffix)
    fun visit(lvalTail: Lval_Tail)
    fun visit(kKexpr: KKexpr)
    fun visit(fcall: Fcall)
    fun visit(pPexprs: PPexprs)
    fun visit(stif: Stif)
    fun visit(elsepart: Elsepart)
    fun visit(stwhile: Stwhile)
    fun visit(stprint: Stprint)
    fun visit(stinput: Stinput)
    fun visit(strtn: Strtn)
    fun visit(strtnSuffix: Strtn_Suffix)
    fun visit(pPexpr: PPexpr)
    fun visit(expr: Expr)
    fun visit(exprTail: Expr_Tail)
    fun visit(rterm: Rterm)
    fun visit(rtermTail: Rterm_Tail)
    fun visit(term: Term)
    fun visit(termTail: Term_Tail)
    fun visit(fact: Fact)
    fun visit(baseLiteral: BaseLiteral)
    fun visit(addrofId: Addrof_id)
    fun visit(oprel: Oprel)
    fun visit(lthan: Lthan)
    fun visit(gthan: Gthan)
    fun visit(opadd: Opadd)
    fun visit(opmul: Opmul)
    fun visit(epsilon: Epsilon)
}
